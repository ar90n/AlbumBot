

// tests for api
// Generated by serverless-mocha-plugin
process.env.IS_TEST = true;
process.env.LOG_LEVEL = 1;

const crypto = require('crypto');
const cookie = require('cookie');
const mod = require('../src/handler.js');
const itemStore = require('../src/lib/itemStore.js');
const talkStore = require('../src/lib/talkStore.js');
const sessionStore = require('../src/lib/sessionStore.js');
const objectStore = require('../src/lib/objectStore.js');
const passGenerator = require('../src/lib/passGenerator.js');
const mochaPlugin = require('serverless-mocha-plugin');
const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;

const liveFunction = {
  region: process.env.SERVERLESS_REGION,
  lambdaFunction: `${process.env.SERVERLESS_PROJECT}-api`,
};

const wrapped = lambdaWrapper.wrap(mod, { handler: 'api' });

describe('api', () => {
  before((done) => {
//  lambdaWrapper.init(liveFunction); // Run the deployed lambda
    done();
  });

  after((done) => {
    done();
  });

  beforeEach((done) => {
    itemStore.clear().then(() => {
      talkStore.clear().then(() => {
        talkStore.put( {talkId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000084582, passHash: 'xoe9gjviF7OPkoLm+SmS2/TbrLnFW1W57QXjf/d+/dg=', updateToken:'UpbWrRj5HBHWFyuhtt/mD/bo/X5Bnvp5XR6dWe5yOpg=', sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e' } )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000170151, id: '5253663423153', type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663423153' } ) )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000169725, id: '5253663390733', type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663390733' } ) )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000169331, id: '5253663356302', type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663356302' } ) )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000169062, id: '5253663336326', type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663336326' } ) )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000151681, id: '5253661949391', type: 'text', text: 'テスト4' } ) )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000144336, id: '5253661356588', type: 'text', text: 'テスト3' } ) )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000136413, id: '5253660727923', type: 'text', text: 'テスト2' } ) )
        .then( () => itemStore.put( { sourceId: 'Cc153a8d971a6fbd1e2357d92cdc7348e', createdAt: 1480000129081, id: '5253660145991', type: 'text', text: 'テスト1' } ) )
        .then( () => sessionStore.put( { sessionId: 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=', hasAuth: true, timeout: 1800000, expireAt:9480003084582  } ) )
        .then( () => done() );
      });
    });
  });

  it('get all image urls', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}` };
    const body = { };
    const headers = { Cookie: `sessionId=${sessionId}` };

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 200 );

      const body = JSON.parse( response.body );
      expect( body.length ).to.equal( 4 );
      expect( body[0] ).to.deep.equal( { createdAt: 1480000170151, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663423153' } );
      expect( body[1] ).to.deep.equal( { createdAt: 1480000169725, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663390733' } );
      expect( body[2] ).to.deep.equal( { createdAt: 1480000169331, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663356302' } );
      expect( body[3] ).to.deep.equal( { createdAt: 1480000169062, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663336326' } );

      done();
    });
  });

  it('get recent two image urls', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}/limit/2` };
    const body = { };
    const headers = { Cookie: `sessionId=${sessionId}` };

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 200 );

      const body = JSON.parse( response.body );
      expect( body.length ).to.equal( 2 );
      expect( body[0] ).to.deep.equal( { createdAt: 1480000170151, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663423153' } );
      expect( body[1] ).to.deep.equal( { createdAt: 1480000169725, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663390733' } );

      done();
    });
  });

  it('get recent two image urls by timestamp', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const beginAt = 1480000169725;
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}/from/${beginAt}` };
    const body = { };
    const headers = { Cookie: `sessionId=${sessionId}` };

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 200 );

      const body = JSON.parse( response.body );
      expect( body.length ).to.equal( 2 );
      expect( body[0] ).to.deep.equal( { createdAt: 1480000170151, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663423153' } );
      expect( body[1] ).to.deep.equal( { createdAt: 1480000169725, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663390733' } );

      done();
    });
  });

  it('get oldest two image urls by timestamp', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const beginAt = 1480000169062;
    const endAt = 1480000169332;
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}/from/${beginAt}/to/${endAt}` };
    const body = { };
    const headers = { Cookie: `sessionId=${sessionId}` };

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 200 );

      const body = JSON.parse( response.body );
      expect( body.length ).to.equal( 2 );
      expect( body[0] ).to.deep.equal( { createdAt: 1480000169331, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663356302' } );
      expect( body[1] ).to.deep.equal( { createdAt: 1480000169062, type: 'image', objectUrl: 'https://dev-bucket-for-album-bot/5253663336326' } );

      done();
    });
  });

  it('get 0 image urls', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}/limit/0` };
    const body = { };
    const headers = { Cookie: `sessionId=${sessionId}` };

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 200 );

      const body = JSON.parse( response.body );
      expect( body.length ).to.equal( 0 );

      done();
    });
  });

  it('update expireAt when api is called', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}` };
    const body = { };
    const headers = { Cookie: `sessionId=${sessionId}` };

    sessionStore.get( { sessionId } ).then( response => {
      const orgSession = response.Items[0];
      const orgExpireAt = orgSession.expireAt;
      wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
        expect(err).to.be.null;

        sessionStore.get( { sessionId } ).then( response => {
          const session = response.Items[0];
          const expireAt = session.expireAt;
          const timeout = session.timeout;
          const expectOrgExpireAt = expireAt - timeout;
          expect( expectOrgExpireAt ).to.equal( orgExpireAt );
          done();
        });
      });
    });
  });


  it('reject access when sessionId is not sent', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}` };
    const body = { };
    const headers = {};

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 401 );

      const body = response.body;
      expect( body ).to.equal( 'Reject api call without authorization' );

      const headers = response.headers;
      expect( headers['Access-Control-Allow-Origin'] ).to.be.not.null;
      expect( headers['Access-Control-Allow-Credentials'] ).to.equal( true );

      done();
    });
  });

  it('reject access when session is expired', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const sessionId = 'AneQmiU3HGhww9qHRz/91/bo/X5Bnvp5XR6dWe5yOpg=';
    const httpMethod = 'GET';
    const pathParameters = { proxy: `v1/albums/${talkId}` };
    const body = { };
    const headers = { Cookie: `sessionId=${sessionId}` };

    sessionStore.update( sessionId, { expireAt: 0 } ).then(() => {
      wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
        expect(err).to.be.null;

        const statusCode = response.statusCode;
        expect( statusCode  ).to.equal( 401 );

        const body = response.body;
        expect( body ).to.equal( 'Reject api call without authorization' );

        const headers = response.headers;
        expect( headers['Access-Control-Allow-Origin'] ).to.be.not.null;
        expect( headers['Access-Control-Allow-Credentials'] ).to.equal( true );

        done();
      });
    });
  });

  it('authentification correctly', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const passPhrase = encodeURIComponent('力強く汚らわしいコクチョウ');
    const httpMethod = 'POST';
    const pathParameters = { proxy: 'v1/auth' };
    const body = `talkId=${talkId}&passPhrase=${passPhrase}`;
    const headers = {};

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 200 );

      const body = JSON.parse( response.body );
      expect( body ).to.deep.equal( {} );

      const headers = response.headers;
      const cookieValueStr = headers['Set-Cookie'];
      const cookieValues = cookie.parse(cookieValueStr);
      expect( cookieValues.sessionId ).to.equal( '59h7c4glwzgkzz/TK3MUFh/IxCUSkWP/XnJg/HKI2jY=' );
      expect( headers['Access-Control-Allow-Origin'] ).to.be.not.null;
      expect( headers['Access-Control-Allow-Credentials'] ).to.equal( true );

      done();
    });
  });

  it('authentification is failed', (done) => {
    const talkId = 'Cc153a8d971a6fbd1e2357d92cdc7348e';
    const passPhrase = encodeURIComponent('力強く汚らわしいコクチョ');
    const httpMethod = 'POST';
    const pathParameters = { proxy: 'v1/auth' };
    const body = `talkId=${talkId}&passPhrase=${passPhrase}`;
    const headers = { };

    wrapped.run({ body, headers, httpMethod, pathParameters }, (err, response) => {
      expect(err).to.be.null;

      const statusCode = response.statusCode;
      expect( statusCode  ).to.equal( 401 );

      const body = response.body;
      expect( body ).to.equal( 'Failed to authorize' );

      const headers = response.headers;
      expect( headers['Access-Control-Allow-Origin'] ).to.be.not.null;
      expect( headers['Access-Control-Allow-Credentials'] ).to.equal( true );

      done();
    });
  });

});

