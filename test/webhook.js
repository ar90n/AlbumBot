

// tests for webhook
// Generated by serverless-mocha-plugin
process.env.IS_TEST = true;

const crypto = require('crypto');
const mod = require('../src/handler.js');
const itemStore = require('../src/lib/itemStore.js');
const talkStore = require('../src/lib/talkStore.js');
const objectStore = require('../src/lib/objectStore.js');
const mochaPlugin = require('serverless-mocha-plugin');
const nock = require('nock');
const lambdaWrapper = mochaPlugin.lambdaWrapper;
const expect = mochaPlugin.chai.expect;

const liveFunction = {
  region: process.env.SERVERLESS_REGION,
  lambdaFunction: `${process.env.SERVERLESS_PROJECT}-webhook`,
};

const wrapped = lambdaWrapper.wrap(mod, { handler: 'webhook' });

describe('webhook', () => {
  before((done) => {
//  lambdaWrapper.init(liveFunction); // Run the deployed lambda
    done();
  });

  after((done) => {
    done();
  });

  beforeEach((done) => {
    itemStore.clear().then(() => {
      talkStore.clear().then(() => {
        nock('https://api.line.me')
          .post('/v2/bot/message/reply')
          .reply(200, {});
        nock('https://api.line.me')
          .get(/\/v2\/bot\/message\/[0-9]+\/content/)
          .reply(200, new Buffer('blob'));
        done();
      });
    });
  });

  const channelSecret = process.env.CHANNEL_SECRET;
  it('add text message item into db when text message is received', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479859;
    const message = {
      id: '325708',
      type: 'text',
      text: 'Hello, world!!!!!!',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'group',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.null;
      itemStore.get(sourceId, createdAt).then((res) => {
        const count = res.Count;
        expect(count).to.equal(1);

        const item = res.Items[0];
        expect(item).to.deep.equal(Object.assign({}, message, { sourceId, createdAt }));

        done();
      });
    });
  });

  it('add image message item into db when image message is received', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479860;
    const message = {
      id: '325709',
      type: 'image',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'group',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.null;
      itemStore.get(sourceId, createdAt).then((res) => {
        const count = res.Count;
        expect(count).to.equal(1);

        const item = res.Items[0];
        const bucket = objectStore.BUCKET_NAME;
        const key = message.id;
        const objectUrl = `https://${bucket}/${key}`;
        expect(item).to.deep.equal(Object.assign({}, message, { sourceId, createdAt, objectUrl }));

        done();
      });
    });
  });

  it('add video message item into db when video message is received', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479861;
    const message = {
      id: '325710',
      type: 'video',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'group',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.null;
      itemStore.get(sourceId, createdAt).then((res) => {
        const count = res.Count;
        expect(count).to.equal(1);

        const item = res.Items[0];
        const bucket = objectStore.BUCKET_NAME;
        const key = message.id;
        const objectUrl = `https://${bucket}/${key}`;
        expect(item).to.deep.equal(Object.assign({}, message, { sourceId, createdAt, objectUrl }));

        done();
      });
    });
  });

  it('ignore audio message', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479861;
    const message = {
      id: '325710',
      type: 'audio',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'group',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.not.null;
      expect(err).to.be.equal('Unsupported message type: audio');

      done();
    });
  });

  it('ignore location message', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479861;
    const message = {
      id: '325710',
      type: 'location',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'group',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.not.null;
      expect(err).to.be.equal('Unsupported message type: location');

      done();
    });
  });

  it('add multi messages item into db when mult messages are received', (done) => {
    const events = [{
      replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTB',
      type: 'message',
      timestamp: 1462629479859,
      source: {
        type: 'group',
        groupId: 'U206d25c2ea6bd87c17655609a1c37cb8',
      },
      message: {
        id: '325708',
        type: 'text',
        text: 'first message',
      },
    },
      {
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: 1462629479860,
        source: {
          type: 'group',
          groupId: 'U206d25c2ea6bd87c17655609a1c37cb8',
        },
        message: {
          id: '325709',
          type: 'text',
          text: 'second message',
        },
      }];
    const body = { events };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    let callbackCount = 0;
    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.null;

      callbackCount += 1;
      if (callbackCount === events.length) {
        itemStore.getAll().then((res) => {
          const count = res.Count;
          expect(count).to.equal(2);

          const item0 = res.Items[0];
          const expectedItem0 = Object.assign({}, events[0].message, { sourceId: events[0].source.groupId, createdAt: events[0].timestamp });
          expect(item0).to.deep.equal(expectedItem0);

          const item1 = res.Items[1];
          const expectedItem1 = Object.assign({}, events[1].message, { sourceId: events[1].source.groupId, createdAt: events[1].timestamp });
          expect(item1).to.deep.equal(expectedItem1);

          done();
        });
      }
    });
  });

  it('add text message item into db when text message is sent from user', (done) => {
    const sourceId = 'cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
    const createdAt = 1462629479859;
    const message = {
      id: '325708',
      type: 'text',
      text: 'Hello, world!!!!!!',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'user',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.not.null;
      expect(err).to.be.equal('Unsupported source type: user');

      done();
    });
  });

  it('add text message item into db when text message is sent from room', (done) => {
    const sourceId = 'cxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
    const createdAt = 1462629479859;
    const message = {
      id: '325708',
      type: 'text',
      text: 'Hello, world!!!!!!',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'room',
          roomId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.not.null;
      expect(err).to.be.equal('Unsupported source type: room');

      done();
    });
  });

  it('create talk item when join event is received from group', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479859;
    const events = [{
      replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
      type: 'join',
      timestamp: createdAt,
      source: {
        type: 'group',
        groupId: sourceId,
      },
    }];

    const body = { events };
    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, {talkId, passHash}) => {
      expect(err).to.be.null;
      talkStore.get(talkId).then((res) => {
        const count = res.Count;
        expect(count).to.equal(1);

        const talk = res.Items[0];
        const expectedTalk = {
          talkId,
          sourceId,
          passHash,
          createdAt,
        };
        expect(talk).to.deep.equal(expectedTalk);

        done();
      });
    });
  });

  it('ignore join event from room', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479859;
    const events = [{
      replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
      type: 'join',
      timestamp: createdAt,
      source: {
        type: 'room',
        roomId: sourceId,
      },
    }];

    const body = { events };
    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(response).to.be.undefined;
      done();
    });
  });

  it('ignore follow event', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479859;
    const events = [{
      replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
      type: 'follow',
      timestamp: createdAt,
      source: {
        type: 'user',
        userId: sourceId,
      },
    }];

    const body = { events };
    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(response).to.be.undefined;
      done();
    });
  });

  it('reply page url when url command is received', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479859;
    const message = {
      id: '325708',
      type: 'text',
      text: '@uRl',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'group',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.null;
      itemStore.get(sourceId, createdAt).then((res) => {
        done();
      });
    });
  });

  it('reply confirm when pass command is received', (done) => {
    const sourceId = 'U206d25c2ea6bd87c17655609a1c37cb8';
    const createdAt = 1462629479859;
    const message = {
      id: '325708',
      type: 'text',
      text: '@Pass aabbccdd',
    };

    const body = {
      events: [{
        replyToken: 'nHuyWiB7yP5Zw52FIkcQobQuGDXCTA',
        type: 'message',
        timestamp: createdAt,
        source: {
          type: 'group',
          groupId: sourceId,
        },
        message,
      }],
    };

    const signature = crypto.createHmac('sha256', channelSecret).update(JSON.stringify(body)).digest('base64');
    const headers = {
      'Content-Type': 'application/json',
      'X-Line-Signature': signature,
    };

    wrapped.run({ body, headers }, (err, response) => {
      expect(err).to.be.null;
      itemStore.get(sourceId, createdAt).then((res) => {
        done();
      });
    });
  });
});
